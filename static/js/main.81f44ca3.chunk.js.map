{"version":3,"sources":["components/Navbar/index.js","components/Navbar/Navbar.js","components/Table/index.js","components/Table/Table.js","screens/HomeScreen/index.js","screens/HomeScreen/HomeScreen.js","components/User-Form/User-Form.js","components/User-Form/index.js","screens/AddNewUserScreen/index.js","screens/AddNewUserScreen/AddNewUser.js","screens/EditUserScreen/index.js","screens/EditUserScreen/EditUserScreen.js","App.js","index.js"],"names":["Navbar","className","to","Table","useQueryClient","query","useQuery","a","request","gql","getClients","isLoading","error","data","isFetching","message","scope","map","user","src","avatarUrl","alt","id","firstName","lastName","phone","HomeScreen","Schema","yup","shape","required","reducer","state","field","value","UserForm","props","initialState","useReducer","dispatch","onChange","e","target","name","useForm","resolver","yupResolver","register","handleSubmit","errors","onSubmit","console","log","graphQLClient","GraphQLClient","headers","mutation","variables","res","alert","JSON","stringify","undefined","type","placeholder","ref","AddNewUser","useParams","find","EditUserScreen","queryClient","QueryClient","App","QueryClientProvider","client","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81f44ca3.chunk.js","sourcesContent":["import Navbar from './Navbar';\r\nexport default Navbar;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        \r\n  <nav className=\"bg-gray-600\">\r\n    <div className=\"max-w-7xl mx-auto px-2 sm:px-6 lg:px-8\">\r\n      <div className=\"relative flex items-center justify-between h-16\">\r\n        <div className=\"flex-1 flex items-center justify-center sm:items-stretch sm:justify-start\">\r\n          <div className=\"hidden sm:block sm:ml-6\">\r\n            <div className=\"flex space-x-4\">\r\n            <Link to=\"/\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-md font-medium\">User list</Link>\r\n            <Link to=\"/add\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-md font-medium\">Add new user</Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import Table from './Table';\r\nexport default Table;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { request, gql } from \"graphql-request\";\r\nimport {\r\n  useQuery,\r\n  useQueryClient,\r\n} from 'react-query';\r\n \r\n export default function Table() {\r\n\r\n  const queryClient = useQueryClient()\r\n  const endpoint = 'https://test-task.expane.pro/api/graphql';\r\n\r\n    const query = useQuery(\"getClients\", async () => {\r\n        const {getClients}= await request(\r\n        endpoint,\r\n        gql `query MyQuery {\r\n          getClients {\r\n            avatarUrl\r\n            firstName\r\n            id\r\n            lastName\r\n            phone\r\n          }\r\n        } `\r\n      );\r\n      return getClients;\r\n    });\r\n\r\n    const { isLoading, error, data, isFetching } =query\r\n\r\n    if (isLoading) return \"Loading...\";\r\n    if (error) return \"An error has occurred: \" + error.message;\r\n\r\n    return(\r\n      <div className=\"flex flex-col\">\r\n       <div className=\"\">\r\n       <table className=\"min-w-full divide-y divide-gray-200\">\r\n         <thead className=\"bg-gray-50\">\r\n          <tr>\r\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">avatar</th>\r\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">id</th>\r\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">first name</th>\r\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">last name</th>\r\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">phone</th>\r\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"> <span className=\"sr-only\">Edit</span></th>\r\n          </tr>\r\n        </thead>\r\n         <tbody className=\"bg-white divide-y divide-gray-200\">\r\n          {query.data.map(user => {\r\n          return (\r\n            <tr key={user.id}>\r\n              <td className=\"px-6 py-4 whitespace-nowrap\" scope=\"col\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"flex-shrink-0 h-10 w-10\">\r\n                  <img className=\"h-10 w-10 rounded-full\" src={user.avatarUrl} alt=\"\"/>\r\n                </div>\r\n              </div>\r\n              </td>\r\n              <td className=\"px-6 py-4 whitespace-nowrap\" scope=\"col\">\r\n                <div className=\"text-sm text-gray-900\">{user.id}</div>\r\n              </td>\r\n              <td className=\"px-6 py-4 whitespace-nowrap\" scope=\"col\">\r\n                <div className=\"text-sm text-gray-900\">{user.firstName}</div>\r\n              </td>\r\n              <td className=\"px-6 py-4 whitespace-nowrap\" scope=\"col\">\r\n                <div className=\"text-sm text-gray-900\">{user.lastName}</div>\r\n              </td>\r\n              <td className=\"px-6 py-4 whitespace-nowrap\" scope=\"col\">{user.phone}</td>\r\n              <td className=\"px-6 py-4 whitespace-nowrap\" scope=\"col\">\r\n                {<Link to={`/edit/${user.id}`} className=\"text-indigo-600 hover:text-indigo-900\">Edit</Link>}\r\n              </td>\r\n            </tr>\r\n            )}\r\n            )}\r\n        </tbody>\r\n       </table>\r\n       </div>\r\n      </div>\r\n        )\r\n }\r\n \r\n\r\n\r\n  \r\n\r\n     \r\n","import HomeScreen from './HomeScreen';\r\n\r\nexport default HomeScreen;","import React from 'react';\r\nimport Table from '../../components/Table';\r\n\r\nconst HomeScreen = () => {\r\n    return <Table/>    \r\n}\r\nexport default HomeScreen;","import React, {useReducer} from 'react'\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from \"yup\";\r\n\r\nimport { GraphQLClient, gql } from 'graphql-request'\r\n\r\n\r\nconst Schema = yup.object().shape({\r\n  firstName: yup.string().required(),\r\n  lastName: yup.string().required(),\r\n  phone: yup.string().required(),\r\n  avatarUrl:yup.string().required()\r\n}); \r\n\r\nconst reducer = (state,{field, value}) => {\r\n  return {\r\n    ...state,\r\n    [field]:value\r\n  }\r\n}\r\nconst UserForm = (props) => {\r\n  \r\n  const initialState = {\r\n    firstName:props.user.firstName || '',\r\n    lastName:props.user.lastName || '',\r\n    phone:props.user.phone || '',\r\n    avatarUrl:props.user.avatarUrl || \"\"\r\n  }\r\n\r\n  const[state, dispatch] = useReducer(reducer,initialState)\r\n  const onChange = (e) => {\r\n    dispatch({field:e.target.name, value:e.target.value})\r\n  };\r\n\r\n  const {firstName, lastName, phone, avatarUrl} = state\r\n\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(Schema)\r\n  });\r\n \r\n\r\n  const onSubmit = async(data) => {\r\n    console.log(data.phone)\r\n    const endpoint = 'https://test-task.expane.pro/api/graphql';\r\n    const graphQLClient = new GraphQLClient(endpoint, {\r\n    headers: {\r\n    },\r\n    })\r\n    const mutation = gql`\r\n    mutation MyMutation($firstName:String!,$lastName:String!,$phone:String, $avatarUrl:String) {\r\n      addClient(firstName:$firstName, lastName:$lastName, phone:$phone, avatarUrl:$avatarUrl) {\r\n        firstName\r\n        id\r\n        lastName\r\n        phone\r\n        avatarUrl\r\n      }\r\n    }\r\n    `;\r\n    const variables = {\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n      phone: data.phone,\r\n      avatarUrl: data.avatarUrl\r\n    }\r\n    \r\nconst res = await graphQLClient.request(mutation,variables)\r\nalert(JSON.stringify(res, undefined, 2))\r\n  };\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"max-w-xl mx-auto py-12 divide-y md:max-w-4xl\">\r\n          <h2 className=\"text-2xl font-bold\">Please fill this form</h2>\r\n            <div className=\"mt-8 max-w-md\">\r\n              <div className=\"grid grid-cols-1 gap-6\">\r\n                <label className=\"block text-sm font-medium\">\r\n                  <span className=\"text-gray-700\">firstName</span>\r\n                   <input onChange={onChange }\r\n                      value={firstName}\r\n                      name=\"firstName\" type=\"text\" \r\n                      className=\"mt-1 block w-full bg-blue-50\"\r\n                      placeholder=''\r\n                      ref={register}/>\r\n                      {errors.firstName && <p className=\"font-serif text-red-600\">{errors.firstName.message}</p>}\r\n                      \r\n                </label>\r\n                <label className=\"block\">\r\n                  <span className=\"text-gray-700\">lastName</span>\r\n                   <input onChange={onChange }\r\n                      value={lastName}\r\n                      name=\"lastName\" type=\"text\" \r\n                      className=\"mt-1 block w-full bg-blue-50\"\r\n                      placeholder=''\r\n                      ref={register}/>\r\n                      {errors.lastName && <p className=\"font-serif text-red-600\">{errors.lastName.message}</p>}\r\n                        \r\n                </label>\r\n                <label className=\"block\">\r\n                  <span className=\"text-gray-700\">phone</span>\r\n                   <input onChange={onChange }\r\n                      value={phone}\r\n                      name=\"phone\" type=\"text\" \r\n                      className=\"mt-1 block w-full bg-blue-50\"\r\n                      placeholder=''\r\n                      ref={register}/>\r\n                      {errors.phone && <p className=\"font-serif text-red-600\">{errors.phone.message}</p>}\r\n                </label>\r\n                <label className=\"block\">\r\n                  <span className=\"text-gray-700\">Avatar</span>\r\n                   <input onChange={onChange }\r\n                      value={avatarUrl}\r\n                      name=\"avatarUrl\" type=\"text\" \r\n                      className=\"mt-1 block w-full bg-blue-50\"\r\n                      placeholder=''\r\n                      ref={register}/>\r\n                      {errors.avatarUrl && <p className=\"font-serif text-red-600\">{errors.avatarUrl.message}</p>}\r\n                      \r\n                </label>\r\n                \r\n              </div>\r\n            </div>\r\n        </div>\r\n\r\n        <input type=\"submit\"  />\r\n            </form>\r\n          );\r\n}\r\n\r\nexport default UserForm\r\n","import UserForm from './User-Form';\r\nexport default UserForm;","import AddNewUser from './AddNewUser';\r\n export default AddNewUser;","import React from 'react'\r\nimport UserForm from '../../components/User-Form';\r\nimport { useParams } from 'react-router-dom';\r\nimport { request, gql } from \"graphql-request\";\r\nimport { useQuery} from 'react-query';\r\n\r\n\r\nconst EditUserScreen = () => {\r\n  const { id } = useParams()\r\n  const endpoint = 'https://test-task.expane.pro/api/graphql';\r\n  \r\n  const query = useQuery(\"getClients\", async () => {\r\n    const {getClients}= await request(\r\n    endpoint,\r\n    gql `query MyQuery {\r\n      getClients {\r\n        avatarUrl\r\n        firstName\r\n        id\r\n        lastName\r\n        phone\r\n      }\r\n    } `\r\n  );\r\n  return getClients;\r\n});\r\n\r\n\r\nconst { isLoading, error, data} = query\r\n\r\n\r\n  if (isLoading) return \"Loading...\";\r\n  if (error) return \"An error has occurred: \" + error.message;\r\n  console.log(data)\r\n  const user = data.find(user => user.id ===id)\r\n \r\n    return <UserForm user={user}/>\r\n        \r\n}\r\n\r\nexport default EditUserScreen\r\n","import EditUserScreen from './EditUserScreen';\r\nexport default EditUserScreen; \r\n\r\n","import React from 'react'\r\nimport UserForm from '../../components/User-Form';\r\nimport { useParams } from 'react-router-dom';\r\nimport { request, gql } from \"graphql-request\";\r\nimport {useQuery} from 'react-query';\r\n\r\n\r\nconst EditUserScreen = () => {\r\n  const { id } = useParams()\r\n  const endpoint = 'https://test-task.expane.pro/api/graphql';\r\n  \r\n  const query = useQuery(\"getClients\", async () => {\r\n    const {getClients}= await request(\r\n    endpoint,\r\n    gql `query MyQuery {\r\n      getClients {\r\n        avatarUrl\r\n        firstName\r\n        id\r\n        lastName\r\n        phone\r\n      }\r\n    } `\r\n  );\r\n  return getClients;\r\n});\r\n\r\n\r\nconst { isLoading, error, data} = query\r\n\r\n\r\n  if (isLoading) return \"Loading...\";\r\n  if (error) return \"An error has occurred: \" + error.message;\r\n  console.log(data)\r\n  const user = data.find(user => user.id ===id)\r\n\r\n\r\n    return <UserForm user={user}/>\r\n          \r\n      \r\n}\r\n\r\nexport default EditUserScreen\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport HomeScreen from './screens/HomeScreen';\nimport AddUserScreen from './screens/AddNewUserScreen';\nimport EditUserScreen from './screens/EditUserScreen';\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n    <Router>\n      <Navbar/>\n        <Switch>\n            <Route exact path=\"/\">\n              <HomeScreen />\n            </Route>\n            <Route path=\"/add\">\n              <AddUserScreen />\n            </Route>\n            <Route path=\"/edit/:id\">\n              <EditUserScreen />\n            </Route>\n        </Switch>\n      </Router>\n    </QueryClientProvider>\n  )\n  }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}